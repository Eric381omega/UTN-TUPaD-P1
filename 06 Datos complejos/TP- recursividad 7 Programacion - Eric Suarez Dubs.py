"TP prgramacion"

"Nombre: Eric Suarez Dubs"

"1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros"
"entre 1 y el n√∫mero que indique el usuario"

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

num = int(input("Introduce un n√∫mero entero positivo: "))

if num < 1:
    print("Por favor, introduce un n√∫mero mayor o igual a 1.")
else:
    print(f"Factoriales del 1 al {num}:")
    for i in range(1, num + 1):
        print(f"{i}! = {factorial(i)}")

"2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique."

def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

pos = int(input("Introduce una posici√≥n entera no negativa para la serie de Fibonacci: "))

if pos < 0:
    print("Por favor, introduce un n√∫mero entero no negativo.")
else:
    print(f"Serie de Fibonacci hasta la posici√≥n {pos}:")
    for i in range(pos + 1):
        print(f"F({i}) = {fibonacci(i)}")

"3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõ ùëö = ùëõ ‚àó ùëõ (ùëö‚àí1) . Prueba esta funci√≥n en un algoritmo general."

def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

base = int(input("Introduce la base: "))
exponente = int(input("Introduce el exponente (entero no negativo): "))

if exponente < 0:
    print("Este programa solo acepta exponentes enteros no negativos.")
else:
    resultado = potencia(base, exponente)
    print(f"{base}^{exponente} = {resultado}")

"4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto."
"Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y unos (1), en base 2. Para convertir un n√∫mero decimal a binario, se puede seguir este procedimiento:"

"1. Dividir el n√∫mero por 2."
"2. Guardar el resto (0 o 1)."
"3. Repetir el proceso con el cociente hasta que llegue a 0."
"4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario."

def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

numero = int(input("Introduce un n√∫mero entero positivo: "))

if numero < 0:
    print("Por favor, introduce un n√∫mero entero positivo.")
elif numero == 0:
    print("El n√∫mero binario de 0 es: 0")
else:
    binario = decimal_a_binario(numero)
    print(f"La representaci√≥n binaria de {numero} es: {binario}")

"5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es."

def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])

palabra = input("Introduce una palabra (sin espacios ni tildes): ").lower()

if es_palindromo(palabra):
    print(f'"{palabra}" es un pal√≠ndromo.')
else:
    print(f'"{palabra}" no es un pal√≠ndromo.')

"6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos."

def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)

print(suma_digitos(1234))  
print(suma_digitos(9))     
print(suma_digitos(305))   

"7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque."
"Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide."

def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

entrada = input("Introduce el n√∫mero de bloques en el nivel m√°s bajo (entero positivo): ")

if entrada.isdigit() and int(entrada) >= 1:
    numero = int(entrada)
    total = contar_bloques(numero)
    print(f"Para construir la pir√°mide con {numero} bloques en la base, se necesitan {total} bloques en total.")
else:
    print("Entrada inv√°lida. Debes ingresar un n√∫mero entero positivo mayor o igual a 1.")

"8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero."

def contar_digito(numero, digito):
    if numero == 0:
        return 0
    else:
        ultimo = numero % 10
        if ultimo == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)

entrada_num = input("Introduce un n√∫mero entero positivo: ")
entrada_dig = input("Introduce el d√≠gito que quieres contar (0-9): ")

if entrada_num.isdigit() and entrada_dig.isdigit():
    numero = int(entrada_num)
    digito = int(entrada_dig)

    if 0 <= digito <= 9:
        resultado = contar_digito(numero, digito)
        print(f"El d√≠gito {digito} aparece {resultado} veces en el n√∫mero {numero}.")
    else:
        print("El d√≠gito debe estar entre 0 y 9.")
else:
    print("Entrada inv√°lida. Ambos valores deben ser enteros positivos.")
